/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2012                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale 0.001;

angle   1; //angle either side of xy plane
radius  25;
height  50;

radAngle    #eval{degToRad($angle)};
z2          #eval{$radius*sin($radAngle)};
z1          #eval{$z2 * -1.0};
x           #eval{$radius*cos($radAngle)};


vertices
(
    // block
    // (0 0 $z1) // 0
    // ($x 0 $z1) // 1
    // ($x $height $z1) // 2
    // (0 $height $z1) // 3

    // (0 0 $z2) // 4
    // ($x 0 $z2) // 5
    // ($x $height $z2) // 6
    // (0 $height $z2) // 7

    // wedge
    (0 0 0) // 0
    ($x 0 $z1) // 1
    ($x $height $z1) // 2
    (0 $height 0) // 3

    (0 0 0) // 4
    ($x 0 $z2) // 5
    ($x $height $z2) // 6
    (0 $height 0) // 7
);

blocks
(
    hex (0 1 2 3 0 5 6 3) (60 200 2) simpleGrading (7 1 1) // collapses vertices from block to form wedge
    // hex (0 1 2 3 4 5 6 7) (30 180 5) simpleGrading (15 1 1)
);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            // (3 7 6 2)
            (3 3 6 2)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            // (1 5 4 0)
            (1 5 0 0)
        );
    }
    walls
    {
        type wall;
        faces
        (
            // (2 6 5 1)
            // (4 0 3 7)
            (2 6 5 1)
            (0 0 3 3)
        );
    }
    side1
    {
        type patch;
        // type cyclic;
        // neighbourPatch side2;
        // type symmetry;
        faces
        (
            // (4 5 6 7) 
            (0 5 6 3)   
        );
    }
    side2
    {
        type patch;
        // type cyclic;
        // neighbourPatch side1;
        // type symmetry;
        faces
        (
            (0 3 2 1)
        );
    }
);


// ************************************************************************* //
